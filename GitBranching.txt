Все команды:
	show commands
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Команды:
	commit
	branch
	checkout
	cherry-pick
	reset
	revert
	rebase
	merge

Ветки в GIT:
	Это просто ссылки на определённый коммит
	делай ветки сразу, делай ветки часто
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Создать новую ветку:
	git branch <Название>

Выбрать ветку:
	git checkout <Название>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Создать новую ветку и переключиться: 
	git checkout -b <yourbranchname>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Слияние веток:
	git megre <Название> (Создать новую ветку и там продолжить)
	или
	git rebase <Название> (Продолжить с этой ветки)
		Плюсы и минусы:
		+ Rebasing делает дерево коммитов более чистым и читабельным, потому что всё представляется единой прямой линией.
		- Метод rebasing явно изменяет историю коммитов в дереве.
			(Например, коммит C1 может быть перебазирован после C3. Соответственно, в дереве работа над C1' будет 
			отображаться как идущая после C3, хотя на самом деле она была выполнена раньше.)

HEAD всегда указывает на последний коммит из вашего дерева.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Визуализация древа:
	git log
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Перемещение на один коммит назад(найти родителя ветки):
	git checkout <Название>^
		Выбрать родителя(при нескольких ветках):
			git checkout <Название>^<num>
	git checkout HEAD^(По нынешнему положению вверх)

	Создать ветку выше от начальной на...:
		git branch <Название> <Начальная точка>^<num>

Перемещение на несколько коммитов назад:
	git checkout <Название>~<num>
	git checkout HEAD^<num>(По нынешнему положению вверх)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Можно напрямую прикрепить ветку к коммиту при помощи опции -f:
	git branch -f <Название> HEAD~3
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
Отмена изменений:
	git reset HEAD~1

Чтобы отменить изменения и поделиться отменёнными изменениями с остальными:
	git revert HEAD
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Копировать несколько коммитов на место, где сейчас находишься (HEAD):
	git cherry-pick <Commit1> <Commit2> <...>

Rакие коммиты готовы к копированию на цель rebase (target):
	git rebase -i HEAD~4
	После открытия окна интерактивного rebase есть три варианта для каждого коммита:

	Можно сменить положение коммита по порядку, переставив строчку с ним в редакторе
	Можно "выкинуть" коммит из ребейза:
		git cherry-pick
	Внести изменения:
		git commit --amend
	Наконец, можно соединить коммиты. В этом уровне игры у нас не реализована эта возможность, но, вкратце, при помощи этой функции можно объединять изменения двух коммитов.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Поместить любой коммит сразу после HEAD:
	git cherry-pick C2
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Создать тег на коммит:
	git tag <НазваниеТега> <Название>

Расстояние от текущего состоянич до ближайшего тега:
	git describe <ref>
		Где ref — это что-либо, что указывает на конкретный коммит(Название). 
		Если не указать ref, то git будет считать, что указано текущее положение (HEAD).
	Вывод команды выглядит примерно так:
		<tag>_<numCommits>_g<hash>:
			Где tag – это ближайший тег в истории изменений 
			numCommits – это на сколько далеко мы от этого тега 
			hash – это хеш коммита, который описывается.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Создать локальную копию удалённого репозитория:
	git clone

Правило именования удалённого репозитория:
	<удалённый репозиторий>/<имя ветки>
	Общепринятым является именование удалённого репозитория как origin
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Извлечь данные из удалённого репозитория:
	git fetch(Скачать)
	git merge <удалённый репозиторий>/<имя ветки>(Скачать)
	Выполняет две и только две основные операции. А именно:
		Cвязывается с указанным удалённым репозиторием и забирает все те данные проекта, которых у вас ещё нет, при этом...
		У вас должны появиться ссылки на все ветки из этого удалённого репозитория (например, o/main)
	Команда всего лишь скачивает все необходимые данные, но вам потребуется вручную слить эти данные с вашими, когда вы будете готовы.
	Одним словом, вы можете относиться к git fetch как к процедуре скачивания.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Скачать и установить:
	git pull
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Изменить удалённый репозиторий, но не скачивать этот коммит:
	git fakeTeamwork 
	git fakeTeamwork <НазваниеКоммита> <Количество>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(Публикация)Загрузка ваших изменений в указанный удалённый репозиторий, а также включение ваших коммитов в состав удалённого репозитория:
	git push
	git push <удалённый_репозиторий> <целевая_ветка>(Конкретная ветка)
	git push origin <источник>:<получатель>(Из этой ветку наместо той ветки)
	git push origin :<получатель>(Удалить ветку у себя)
		Замечание - поведение команды git push без аргументов варьируется в зависимости от значения push.default, указанной в 
		настройках git-а. Значение по умолчанию зависит от версии git, которую вы используете, однако в наших уроках мы будем 
		использовать значение upstream. Лучше всегда проверять эту опцию прежде чем push-ить ваши настоящие проекты.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Сдвинуть свою работу:
	git rebase <удалённый репозиторий>/<имя ветки>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Скачать патч, затем залить свой:
	git fetch(скачать все)
		git fetch origin <название>(Чтобы скачать определенный патч)
		git fetch origin :<получатель>(Удалить у репозитория патч)
	ИЛИ
	git fetch origin <источник>:<получатель>
		git rebase <удалённый репозиторий>/<имя ветки>
		Или
		git merge <удалённый репозиторий>/<имя ветки>
	git push

	Или

	git pull --rebase
	pit push

	Или

	git pull
	git push
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Скачать определенный патч и установить:
	git pull origin foo

	ИЛИ
	git fetch origin foo
	git merge o/foo

	ИЛИ
	git pull origin bar~1:bugFix
	
	ИЛИ
	git fetch origin bar~1:bugFix
	git merge bugFix
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Запрос на слияние:
	Pull request
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Создать новую ветку с именем totallyNotMain и укажет следить за o/main
	git checkout -b totallyNotMain o/main
		git pull
		ИЛИ 
		git commit
		git push
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Следить за веткой:
	git branch -u o/main foo(Ветке foo следить за o/main)
	ЕСЛИ ВЫ УЖЕ НА ЭТОЙ ВЕТКЕ:
	git branch -u o/main

Удалить ветку из репозитория:
	git push origin :<название>

